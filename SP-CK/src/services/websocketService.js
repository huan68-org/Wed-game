import { EventEmitter } from 'events';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8080';
const WS_URL = API_URL.replace(/^http/, 'ws');

class WebSocketService extends EventEmitter {
    constructor() {
        super();
        this.ws = null;
        this.reconnectInterval = 5000;
        this.shouldReconnect = false;
        this.apiKey = null; // Th√™m d√≤ng n√†y ƒë·ªÉ d·ªÖ theo d√µi
    }

    connect(apiKey) {
        console.log('[WebSocket] G·ªçi h√†m connect v·ªõi apiKey:', apiKey); // LOG 1: Ki·ªÉm tra apiKey ƒë·∫ßu v√†o
        
        if (!apiKey) {
            console.error('[WebSocket] L·ªói: C·ªë g·∫Øng k·∫øt n·ªëi m√† kh√¥ng c√≥ apiKey.');
            return;
        }
        
        if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {
            console.warn('[WebSocket] Connection attempt ignored, socket is already open or connecting.');
            return;
        }

        this.shouldReconnect = true;
        this.apiKey = apiKey;

        const connectionUrl = `${WS_URL}?apiKey=${this.apiKey}`;
        console.log('[WebSocket] ƒêang c·ªë g·∫Øng k·∫øt n·ªëi ƒë·∫øn:', connectionUrl); // LOG 2: Ki·ªÉm tra URL k·∫øt n·ªëi
        
        this.ws = new WebSocket(connectionUrl);

        this.ws.onopen = () => {
            console.log('‚úÖ‚úÖ‚úÖ [WebSocket] ONOPEN: K·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!');
            this.emit('connect');
        };

        this.ws.onmessage = (event) => {
            console.log('üì¨üì¨üì¨ [WebSocket] ONMESSAGE: Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ server:', event.data);
            try {
                const { type, payload } = JSON.parse(event.data);
                console.log('[WebSocket] ƒê√£ ph√¢n t√≠ch tin nh·∫Øn - Type:', type, 'Payload:', payload);
                this.emit(type, payload);
            } catch (error)
                console.error('[WebSocket] L·ªói ph√¢n t√≠ch tin nh·∫Øn (JSON.parse):', error);
            }
        };

        this.ws.onclose = (event) => {
            console.log('‚ùå‚ùå‚ùå [WebSocket] ONCLOSE: K·∫øt n·ªëi ƒë√£ b·ªã ƒë√≥ng.', 'Code:', event.code, 'Reason:', event.reason);
            this.emit('disconnect');
            if (this.shouldReconnect) {
                console.log(`[WebSocket] S·∫Ω k·∫øt n·ªëi l·∫°i sau ${this.reconnectInterval / 1000} gi√¢y...`);
                setTimeout(() => this.connect(this.apiKey), this.reconnectInterval);
            }
        };

        this.ws.onerror = (error) => {
            console.error('üî•üî•üî• [WebSocket] ONERROR: ƒê√£ x·∫£y ra l·ªói k·∫øt n·ªëi!', error);
            // Kh√¥ng c·∫ßn g·ªçi this.ws.close() ·ªü ƒë√¢y, v√¨ s·ª± ki·ªán onclose s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t sau onerror.
        };
    }

    disconnect() {
        console.log('[WebSocket] G·ªçi h√†m disconnect.');
        this.shouldReconnect = false;
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
    }

    send(type, payload) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            const message = JSON.stringify({ type, payload });
            console.log('[WebSocket] ƒêang g·ª≠i tin nh·∫Øn:', message);
            this.ws.send(message);
        } else {
            console.error('[WebSocket] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn, k·∫øt n·ªëi ch∆∞a s·∫µn s√†ng. Tr·∫°ng th√°i hi·ªán t·∫°i:', this.ws ? this.ws.readyState : 'null');
        }
    }

    isConnected() {
        return this.ws && this.ws.readyState === WebSocket.OPEN;
    }
}

const instance = new WebSocketService();
export default instance;